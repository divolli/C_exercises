#ifndef UTILS_H
#define UTILS_H

#include <stdint.h>
#include <string.h> // For strlen (if you use it in macro implementation)

// Macro generating a function to count '01' bit pairs in a given numeric type.
// E.g., CREATE_BIT_PAIR_COUNT_FUNC(char) will create a prototype: uint8_t count_01_pairs_char(char val);
#define CREATE_BIT_PAIR_COUNT_FUNC(type_name) \
uint8_t count_01_pairs_##type_name(type_name val)

// Macro generating a function to count '01' bit pairs in each byte of a string.
// This function will be used for hashes and names.
// In its implementation, you will need to call the count_01_pairs_char function.
#define CREATE_STRING_BIT_PAIR_COUNT_FUNC(func_name) \
uint8_t func_name(const char *str)

// --- Declarations of functions generated by macros (implement in utils.c) ---

// Declare a specific instance for 'char' so it can be used in the string counting function.
CREATE_BIT_PAIR_COUNT_FUNC(char);

// Declare the function to count '01' pairs in strings, which will use count_01_pairs_char.
CREATE_STRING_BIT_PAIR_COUNT_FUNC(count_01_pairs_in_string);

// --- Prototypes of comparison functions (implement in utils.c or main.c) ---

/**
 * @brief Function for comparing two hashes (strings).
 * @return <0 if hash1 < hash2, 0 if equal, >0 if hash1 > hash2.
 */
int compare_asset_hashes(const char *hash1, const char *hash2);

/**
 * @brief Function for comparing two usernames (strings).
 * Implement simple case-insensitivity (e.g., convert to lowercase for comparison).
 * @return <0 if name1 < name2, 0 if equal, >0 if name1 > name2.
 */
int compare_user_names(const char *name1, const char *name2);

#endif // UTILS_H
